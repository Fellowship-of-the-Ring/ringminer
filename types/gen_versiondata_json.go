// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
	"math/big"
)

var _ = (*versionDataMarshaling)(nil)

func (v VersionData) MarshalJSON() ([]byte, error) {
	type VersionData struct {
		RemainedAmountS *Big        `json:"remainedAmountS" gencodec:"required"`
		RemainedAmountB *Big        `json:"remainedAmountB" gencodec:"required"`
		Block           *Big        `json:"block"`
		Status          OrderStatus `json:"status"`
	}
	var enc VersionData
	enc.RemainedAmountS = (*Big)(v.RemainedAmountS)
	enc.RemainedAmountB = (*Big)(v.RemainedAmountB)
	enc.Block = (*Big)(v.Block)
	enc.Status = v.Status
	return json.Marshal(&enc)
}

func (v *VersionData) UnmarshalJSON(input []byte) error {
	type VersionData struct {
		RemainedAmountS *Big         `json:"remainedAmountS" gencodec:"required"`
		RemainedAmountB *Big         `json:"remainedAmountB" gencodec:"required"`
		Block           *Big         `json:"block"`
		Status          *OrderStatus `json:"status"`
	}
	var dec VersionData
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.RemainedAmountS == nil {
		return errors.New("missing required field 'remainedAmountS' for VersionData")
	}
	v.RemainedAmountS = (*big.Int)(dec.RemainedAmountS)
	if dec.RemainedAmountB == nil {
		return errors.New("missing required field 'remainedAmountB' for VersionData")
	}
	v.RemainedAmountB = (*big.Int)(dec.RemainedAmountB)
	if dec.Block != nil {
		v.Block = (*big.Int)(dec.Block)
	}
	if dec.Status != nil {
		v.Status = *dec.Status
	}
	return nil
}
